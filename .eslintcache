[{"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\App.tsx":"1","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\CollisionSphere.ts":"2","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\constants.ts":"3","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\util.ts":"4","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ViewportHooks.tsx":"5","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Effects.tsx":"6","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ThreePointVis.tsx":"7","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Stats.tsx":"8","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\DataList\\DataList.tsx":"9","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointInfo.tsx":"10","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\LoadingOverlay\\LoadingOverlay.tsx":"11","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Controls.tsx":"12","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\InstancedPoints.tsx":"13","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\VoxelInstancedPoints.tsx":"14","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ClusterHulls.tsx":"15","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Text.tsx":"16","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\index.tsx":"17","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointDetailsSection.tsx":"18"},{"size":20011,"mtime":1618710937027,"results":"19","hashOfConfig":"20"},{"size":1729,"mtime":1610877982584,"results":"21","hashOfConfig":"20"},{"size":2211,"mtime":1618712802491,"results":"22","hashOfConfig":"20"},{"size":905,"mtime":1615676362212,"results":"23","hashOfConfig":"20"},{"size":1084,"mtime":1610878019098,"results":"24","hashOfConfig":"20"},{"size":2307,"mtime":1613892880132,"results":"25","hashOfConfig":"20"},{"size":4651,"mtime":1613893062923,"results":"26","hashOfConfig":"20"},{"size":430,"mtime":1610877961401,"results":"27","hashOfConfig":"20"},{"size":6183,"mtime":1618708544656,"results":"28","hashOfConfig":"20"},{"size":1093,"mtime":1615675737634,"results":"29","hashOfConfig":"20"},{"size":438,"mtime":1610877923493,"results":"30","hashOfConfig":"20"},{"size":3892,"mtime":1615675750164,"results":"31","hashOfConfig":"20"},{"size":6711,"mtime":1615675766254,"results":"32","hashOfConfig":"20"},{"size":5238,"mtime":1615686833701,"results":"33","hashOfConfig":"20"},{"size":932,"mtime":1610877933255,"results":"34","hashOfConfig":"20"},{"size":2539,"mtime":1610877965317,"results":"35","hashOfConfig":"20"},{"size":255,"mtime":1610878004046,"results":"36","hashOfConfig":"20"},{"size":2396,"mtime":1615675624208,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1soscny",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\App.tsx",[],["78","79","80","81","82","83","84"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\CollisionSphere.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\constants.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\util.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ViewportHooks.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Effects.tsx",["85"],"import React, { useRef, useEffect, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass.js';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\n\nextend({\n  EffectComposer, ShaderPass, RenderPass, UnrealBloomPass, BloomPass,\n});\n\ninterface EffectsProps {\n  useAA?: boolean;\n  useStandardBloom?: boolean;\n  useUnrealBloom?: boolean;\n}\n\nexport function Effects(props: EffectsProps) {\n  const composer = useRef<EffectComposer>();\n  const {\n    scene, gl, size, camera,\n  } = useThree();\n  const aspectScalar = 8;\n  const aspect = useMemo(() => new THREE.Vector2(size.width / aspectScalar, size.height / aspectScalar), [\n    size,\n  ]);\n  const { useAA, useStandardBloom, useUnrealBloom } = props;\n\n  useEffect(() => composer.current!.setSize(size.width, size.height), [\n    size,\n  ]);\n  useFrame(() => (composer.current ? composer.current.render() : null), 1);\n\n  const unrealBloom = {\n    resolution: aspect,\n    strength: 0.3,\n    radius: 0.02,\n    threshold: 0.19,\n  };\n\n  const bloom = {\n    strength: 1,\n    kernelSize: 25,\n    sigma: 4,\n    targetResolution: 256,\n  };\n\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      { useUnrealBloom && (\n      <unrealBloomPass\n        attachArray=\"passes\"\n        args={[unrealBloom.resolution, unrealBloom.strength, unrealBloom.radius, unrealBloom.threshold]}\n      />\n      ) }\n      { useStandardBloom && (\n      <bloomPass\n        attachArray=\"passes\"\n        args={[bloom.strength, bloom.kernelSize, bloom.sigma, bloom.targetResolution]}\n      />\n      ) }\n      { useAA && (\n      <shaderPass\n        attachArray=\"passes\"\n        args={[FXAAShader]}\n        material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n        renderToScreen\n      />\n      ) }\n    </effectComposer>\n  );\n}\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ThreePointVis.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Stats.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\DataList\\DataList.tsx",["86","87","88","89","90","91"],"// Based on: https://medium.com/@leofabrikant/react-autocomplete-with-react-virtualized-to-handle-massive-search-results-7865a8786972\nimport * as React from 'react';\nimport { areEqual, FixedSizeList as List } from 'react-window';\nimport './DataList.scss';\nimport { memo, useRef } from 'react';\n\nexport interface DataListProps {\n  values: string[];\n  id: string;\n  onSelect?: (\n    selected: string,\n    isMultiSelect?: boolean\n  ) => void;\n  onChange?: (\n    newText: string\n  ) => void;\n}\n\nexport const cleanTerm = (term: string) => term.toLowerCase().replace(/\\s+/g, '');\n\nconst itemHeight = 30;\n\nexport const DataList = memo((props: DataListProps) => {\n  const {\n    values, id, onChange, onSelect,\n  } = props;\n\n  const [activeIndex, setActiveIndex] = React.useState<number | null>(null);\n  const [lastHoverIndex, setLastHoverIndex] = React.useState(0);\n  const [showMenu, setShowMenu] = React.useState(false);\n  const [mouseSelect, setMouseSelect] = React.useState(false);\n  const [searchTerm, setSearchTerm] = React.useState('');\n\n  const listRef = useRef<List>(null);\n  const containerRef = useRef<HTMLDivElement | null>(null);\n\n  const handleClick = (e: MouseEvent) => {\n    if (containerRef?.current?.contains(e.target as Node)) {\n      // inside click\n      return;\n    }\n    setShowMenu(false);\n    setActiveIndex(null);\n  };\n\n  // https://medium.com/@pitipatdop/little-neat-trick-to-capture-click-outside-with-react-hook-ba77c37c7e82\n  React.useEffect(() => {\n    // add when mounted\n    document.addEventListener('mousedown', handleClick);\n\n    // return function to be called when unmounted\n    return () => {\n      document.removeEventListener('mousedown', handleClick);\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (containerRef.current) {\n      containerRef?.current?.setAttribute('tabIndex', '0');\n    }\n  }, [containerRef]);\n\n  // @ts-ignore\n  // eslint-disable-next-line react/prop-types\n  const Row = memo(({ data, index, style }) => {\n    // Data passed to List as \"itemData\" is available as props.data\n    const item = data[index];\n\n    return (\n      // eslint-disable-next-line max-len\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/mouse-events-have-key-events,jsx-a11y/no-static-element-interactions\n      <div\n        className=\"data-list-item\"\n        onMouseOver={() => {\n          if (lastHoverIndex !== index && mouseSelect) {\n            setActiveIndex(index);\n            setLastHoverIndex(index);\n          }\n        }}\n        onMouseMove={() => setMouseSelect(true)}\n        style={{\n          ...style,\n          backgroundColor: index === activeIndex ? '#0b195e' : '#111111',\n          verticalAlign: 'center',\n        }}\n        onClick={(e) => {\n          setShowMenu(false);\n          setActiveIndex(null);\n          onSelect && onSelect(values[index], e.ctrlKey);\n        }}\n      >\n        {item}\n      </div>\n    );\n  }, areEqual);\n\n  React.useEffect(() => {\n    if (activeIndex !== null) {\n      listRef.current?.scrollToItem(activeIndex);\n    }\n  });\n\n  return (\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    <div\n      className=\"data-list\"\n      onKeyDown={(e) => {\n        const listLength = values.length;\n        // e.preventDefault();\n        e.stopPropagation();\n        if (e.keyCode === 13) { // enter\n          if (activeIndex) {\n            const value = values[activeIndex];\n            onSelect && value && onSelect(value, e.ctrlKey);\n            setShowMenu(false);\n            setActiveIndex(null);\n          } else {\n            onSelect && onSelect(searchTerm, e.ctrlKey);\n          }\n        } else {\n          if (!showMenu) {\n            setShowMenu(true);\n          }\n          if (e.keyCode === 38) { // up arrow\n            if (activeIndex === null) {\n              setActiveIndex(listLength - 1);\n            } else {\n              setMouseSelect(false);\n              const newActiveIndex = activeIndex - 1;\n              setActiveIndex(newActiveIndex >= 0 ? newActiveIndex : listLength - 1);\n            }\n          } else if (e.keyCode === 40) { // down arrow\n            if (activeIndex === null) {\n              setActiveIndex(0);\n            } else {\n              setMouseSelect(false);\n              const newActiveIndex = activeIndex + 1;\n              setActiveIndex(newActiveIndex < listLength ? newActiveIndex : 0);\n            }\n          } else if (e.keyCode === 33) { // page up\n            if (activeIndex === null) {\n              setActiveIndex(0);\n            } else {\n              setMouseSelect(false);\n              const newActiveIndex = activeIndex - 6;\n              setActiveIndex(newActiveIndex >= 0 ? newActiveIndex : 0);\n            }\n          } else if (e.keyCode === 34) { // page down\n            if (activeIndex === null) {\n              setActiveIndex(listLength - 1);\n            } else {\n              setMouseSelect(false);\n              const newActiveIndex = activeIndex + 6;\n              setActiveIndex(newActiveIndex < listLength ? newActiveIndex : listLength - 1);\n            }\n          } else if (e.keyCode === 27) { // escape\n            setActiveIndex(null);\n            setShowMenu(false);\n          } else {\n            setActiveIndex(null);\n          }\n        }\n      }}\n    >\n      {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n      <div className=\"data-list-input\" ref={containerRef}>\n        <input\n          type=\"text\"\n          id={id}\n          list=\"subreddits\"\n          onClick={() => setShowMenu(true)}\n          onChange={(e) => {\n            setSearchTerm(e.target.value);\n            if (onChange) {\n              onChange(e.target.value);\n            }\n          }}\n        />\n        {showMenu\n        && (\n          <List\n            ref={listRef}\n            width=\"100%\"\n            height={itemHeight * 6}\n            key={id}\n            style={{ position: 'absolute' }}\n            itemCount={values.length}\n            itemData={values}\n            itemSize={itemHeight}\n          >\n            {Row}\n          </List>\n        )}\n      </div>\n    </div>\n  );\n});\n\nDataList.displayName = 'DataList';\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointInfo.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\LoadingOverlay\\LoadingOverlay.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Controls.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\InstancedPoints.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\VoxelInstancedPoints.tsx",["92","93","94","95"],"import * as React from 'react';\nimport * as THREE from 'three';\nimport {\n  InstancedBufferAttribute, MeshLambertMaterial, Object3D, Vector3,\n} from 'three';\nimport { memo, useMemo } from 'react';\nimport { Point } from '../App';\nimport { clusterColors, POINT_RADIUS } from '../constants';\n\ninterface VoxelInstancedPointsProps {\n  data: Point[];\n  pointSegments: number;\n  voxelResolution: number;\n  debugVoxels?: boolean;\n}\n\nconst gridScale = 1001;\nconst scratchColor = new THREE.Color(0xff0000);\n\nconst updateColors = (\n  points: Point[],\n  colorArray: Float32Array,\n  colorAttrib: InstancedBufferAttribute,\n  voxelIndex?: number,\n) => {\n  for (let i = 0; i < points.length; ++i) {\n    const point = points[i];\n    scratchColor.set(\n      clusterColors[voxelIndex === undefined ? point.cluster : voxelIndex % clusterColors.length],\n    );\n    scratchColor.toArray(colorArray, i * 3);\n  }\n  if (colorAttrib) {\n    // eslint-disable-next-line no-param-reassign\n    colorAttrib.needsUpdate = true;\n  }\n};\n\nexport const VoxelInstancedPoints = memo((props: VoxelInstancedPointsProps) => {\n  const {\n    data, pointSegments, voxelResolution, debugVoxels,\n  } = props;\n\n  const [voxels, setVoxels] = React.useState<Point[][]>([]);\n\n  // re-use for instance computations\n  const meshRefs = React.useRef<THREE.InstancedMesh[]>([]);\n  const colorAttribs = React.useRef<THREE.InstancedBufferAttribute[]>([]);\n  const colorArrays: Float32Array[] = [];\n  for (let i = 0; i < voxels.length; i++) {\n    colorArrays[i] = new Float32Array(voxels[i].length * 3);\n  }\n\n  // Sort points into voxel grid when data or grid resolution changes\n  React.useEffect(() => {\n    // eslint-disable-next-line no-mixed-operators\n    const gridStep = gridScale * 2 / voxelResolution; // double grid scale to account for negative ranges\n    const numVoxels = voxelResolution ** 3;\n    const newVoxels: Point[][] = [];\n    for (let i = 0; i < numVoxels; i++) {\n      newVoxels.push([]);\n    }\n\n    // const newVoxels: Point[][] = new Array(Math.pow(voxelResolution, 3)).fill(new Array);\n    data.forEach((point) => {\n      if (point.include) {\n        // Shift into positive ranges\n        const x = point.x + gridScale;\n        const y = point.y + gridScale;\n        const z = point.z + gridScale;\n\n        const voxelIndex = Math.floor(x / gridStep)\n          + Math.floor(y / gridStep) * voxelResolution\n          + Math.floor(z / gridStep) * voxelResolution * voxelResolution;\n        newVoxels[voxelIndex].push(point);\n      }\n    });\n    setVoxels(newVoxels);\n  }, [data, voxelResolution]);\n\n  // re-use for instance computations\n  const scratchObject3D = useMemo(() => new Object3D(), []);\n  const sharedMaterial = useMemo(() => new MeshLambertMaterial({ vertexColors: true }), []);\n\n  React.useEffect(() => {\n    for (let i = 0; i < voxels.length; ++i) {\n      const voxel = voxels[i];\n      const mesh = meshRefs.current[i];\n      const points = voxel.map((p) => new Vector3(p.x, p.y, p.z));\n\n      if (mesh) {\n        mesh.matrixAutoUpdate = false; // TODO try for clusters\n        mesh.updateMatrix();\n        // set the transform matrix for each instance\n        for (let j = 0; j < points.length; ++j) {\n          const { x } = points[j];\n          const { y } = points[j];\n          const { z } = points[j];\n\n          scratchObject3D.position.set(x, y, z);\n          scratchObject3D.updateMatrix();\n          mesh.setMatrixAt(j, scratchObject3D.matrix);\n        }\n\n        mesh.geometry.boundingSphere = new THREE.Sphere().setFromPoints(points);\n        mesh.geometry.boundingSphere.radius = Math.max(mesh.geometry.boundingSphere.radius, POINT_RADIUS);\n        mesh.instanceMatrix.needsUpdate = true;\n        mesh.frustumCulled = true;\n        updateColors(\n          voxel,\n          colorArrays[i],\n          colorAttribs.current[i],\n          debugVoxels ? i : undefined,\n        );\n      }\n    }\n  }, [voxels, scratchObject3D, colorArrays, debugVoxels]);\n\n  return (\n    <>\n      {voxels.map((voxel, index) => (voxel.length > 0\n        ? (\n          <instancedMesh\n            key={`${index} ${voxel.length}`}\n            ref={(mesh: THREE.InstancedMesh) => meshRefs.current[index] = mesh}\n            args={[\n                  // TODO sort out the bugged typing here.\n                  // Ref: https://spectrum.chat/react-three-fiber/general/instancedmesh-gone-on-rerender-in-typescript~35e4d145-517f-4b81-b0c7-ab89e02bd72f\n                  (null as unknown) as THREE.BufferGeometry,\n                  (null as unknown) as THREE.Material,\n                  voxel.length,\n            ]}\n            material={sharedMaterial}\n          >\n            <sphereBufferGeometry\n              attach=\"geometry\"\n              args={[POINT_RADIUS, pointSegments, pointSegments]}\n              key={pointSegments}\n            >\n              <instancedBufferAttribute\n                name={`color - voxel ${index}`}\n                ref={(colorAttrib: THREE.InstancedBufferAttribute) => colorAttribs.current[index] = colorAttrib}\n                attachObject={['attributes', 'color']}\n                args={[colorArrays[index], 3]}\n              />\n            </sphereBufferGeometry>\n          </instancedMesh>\n        )\n        : null))}\n      )\n    </>\n  );\n});\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ClusterHulls.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Text.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\index.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointDetailsSection.tsx",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":8,"column":27,"nodeType":"112","endLine":8,"endColumn":75},{"ruleId":"113","severity":1,"message":"114","line":89,"column":11,"nodeType":"115","messageId":"116","endLine":89,"endColumn":58},{"ruleId":"117","severity":1,"message":"114","line":89,"column":11,"nodeType":"115","messageId":"116","endLine":89,"endColumn":58},{"ruleId":"113","severity":1,"message":"114","line":114,"column":13,"nodeType":"115","messageId":"116","endLine":114,"endColumn":61},{"ruleId":"117","severity":1,"message":"114","line":114,"column":13,"nodeType":"115","messageId":"116","endLine":114,"endColumn":61},{"ruleId":"113","severity":1,"message":"114","line":118,"column":13,"nodeType":"115","messageId":"116","endLine":118,"endColumn":57},{"ruleId":"117","severity":1,"message":"114","line":118,"column":13,"nodeType":"115","messageId":"116","endLine":118,"endColumn":57},{"ruleId":"118","severity":1,"message":"119","line":49,"column":9,"nodeType":"120","endLine":49,"endColumn":41},{"ruleId":"121","severity":1,"message":"122","line":124,"column":18,"nodeType":"123","endLine":124,"endColumn":44},{"ruleId":"124","severity":1,"message":"125","line":125,"column":18,"nodeType":"126","messageId":"127","endLine":125,"endColumn":79},{"ruleId":"124","severity":1,"message":"125","line":142,"column":22,"nodeType":"126","messageId":"127","endLine":142,"endColumn":112},"jsx-a11y/label-has-for",[],"lines-around-directive",["128"],"no-spaced-func",["129"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"import/extensions","Unexpected use of file extension \"js\" for \"three/examples/jsm/postprocessing/BloomPass.js\"","Literal","@typescript-eslint/no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","babel/no-unused-expressions","react-hooks/exhaustive-deps","The 'colorArrays' array makes the dependencies of useEffect Hook (at line 117) change on every render. To fix this, wrap the initialization of 'colorArrays' in its own useMemo() Hook.","VariableDeclarator","react/no-array-index-key","Do not use Array index in keys","TemplateLiteral","no-return-assign","Arrow function should not return assignment.","ArrowFunctionExpression","arrowAssignment","padding-line-between-statements","func-call-spacing"]