[{"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\App.tsx":"1","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\CollisionSphere.ts":"2","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\constants.ts":"3","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\util.ts":"4","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ViewportHooks.tsx":"5","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Effects.tsx":"6","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ThreePointVis.tsx":"7","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Stats.tsx":"8","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\DataList\\DataList.tsx":"9","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointInfo.tsx":"10","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\LoadingOverlay\\LoadingOverlay.tsx":"11","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Controls.tsx":"12","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\InstancedPoints.tsx":"13","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\VoxelInstancedPoints.tsx":"14","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ClusterHulls.tsx":"15","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Text.tsx":"16","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\index.tsx":"17","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointDetailsSection.tsx":"18"},{"size":20500,"mtime":1618713559014,"results":"19","hashOfConfig":"20"},{"size":1729,"mtime":1610877982584,"results":"21","hashOfConfig":"20"},{"size":2211,"mtime":1618712802491,"results":"22","hashOfConfig":"20"},{"size":905,"mtime":1615676362212,"results":"23","hashOfConfig":"20"},{"size":1084,"mtime":1610878019098,"results":"24","hashOfConfig":"20"},{"size":2307,"mtime":1613892880132,"results":"25","hashOfConfig":"20"},{"size":4651,"mtime":1613893062923,"results":"26","hashOfConfig":"20"},{"size":430,"mtime":1610877961401,"results":"27","hashOfConfig":"20"},{"size":6183,"mtime":1618715035820,"results":"28","hashOfConfig":"20"},{"size":1093,"mtime":1615675737634,"results":"29","hashOfConfig":"20"},{"size":438,"mtime":1610877923493,"results":"30","hashOfConfig":"20"},{"size":3892,"mtime":1615675750164,"results":"31","hashOfConfig":"20"},{"size":6711,"mtime":1615675766254,"results":"32","hashOfConfig":"20"},{"size":5238,"mtime":1615686833701,"results":"33","hashOfConfig":"20"},{"size":932,"mtime":1610877933255,"results":"34","hashOfConfig":"20"},{"size":2539,"mtime":1610877965317,"results":"35","hashOfConfig":"20"},{"size":255,"mtime":1610878004046,"results":"36","hashOfConfig":"20"},{"size":2396,"mtime":1615675624208,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1soscny",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\App.tsx",[],["77","78","79","80","81","82","83"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\CollisionSphere.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\constants.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\util.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ViewportHooks.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Effects.tsx",["84"],"import React, { useRef, useEffect, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass.js';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\n\nextend({\n  EffectComposer, ShaderPass, RenderPass, UnrealBloomPass, BloomPass,\n});\n\ninterface EffectsProps {\n  useAA?: boolean;\n  useStandardBloom?: boolean;\n  useUnrealBloom?: boolean;\n}\n\nexport function Effects(props: EffectsProps) {\n  const composer = useRef<EffectComposer>();\n  const {\n    scene, gl, size, camera,\n  } = useThree();\n  const aspectScalar = 8;\n  const aspect = useMemo(() => new THREE.Vector2(size.width / aspectScalar, size.height / aspectScalar), [\n    size,\n  ]);\n  const { useAA, useStandardBloom, useUnrealBloom } = props;\n\n  useEffect(() => composer.current!.setSize(size.width, size.height), [\n    size,\n  ]);\n  useFrame(() => (composer.current ? composer.current.render() : null), 1);\n\n  const unrealBloom = {\n    resolution: aspect,\n    strength: 0.3,\n    radius: 0.02,\n    threshold: 0.19,\n  };\n\n  const bloom = {\n    strength: 1,\n    kernelSize: 25,\n    sigma: 4,\n    targetResolution: 256,\n  };\n\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      { useUnrealBloom && (\n      <unrealBloomPass\n        attachArray=\"passes\"\n        args={[unrealBloom.resolution, unrealBloom.strength, unrealBloom.radius, unrealBloom.threshold]}\n      />\n      ) }\n      { useStandardBloom && (\n      <bloomPass\n        attachArray=\"passes\"\n        args={[bloom.strength, bloom.kernelSize, bloom.sigma, bloom.targetResolution]}\n      />\n      ) }\n      { useAA && (\n      <shaderPass\n        attachArray=\"passes\"\n        args={[FXAAShader]}\n        material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n        renderToScreen\n      />\n      ) }\n    </effectComposer>\n  );\n}\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ThreePointVis.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Stats.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\DataList\\DataList.tsx",["85","86","87","88","89","90"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointInfo.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\LoadingOverlay\\LoadingOverlay.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Controls.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\InstancedPoints.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\VoxelInstancedPoints.tsx",["91","92","93","94"],"import * as React from 'react';\nimport * as THREE from 'three';\nimport {\n  InstancedBufferAttribute, MeshLambertMaterial, Object3D, Vector3,\n} from 'three';\nimport { memo, useMemo } from 'react';\nimport { Point } from '../App';\nimport { clusterColors, POINT_RADIUS } from '../constants';\n\ninterface VoxelInstancedPointsProps {\n  data: Point[];\n  pointSegments: number;\n  voxelResolution: number;\n  debugVoxels?: boolean;\n}\n\nconst gridScale = 1001;\nconst scratchColor = new THREE.Color(0xff0000);\n\nconst updateColors = (\n  points: Point[],\n  colorArray: Float32Array,\n  colorAttrib: InstancedBufferAttribute,\n  voxelIndex?: number,\n) => {\n  for (let i = 0; i < points.length; ++i) {\n    const point = points[i];\n    scratchColor.set(\n      clusterColors[voxelIndex === undefined ? point.cluster : voxelIndex % clusterColors.length],\n    );\n    scratchColor.toArray(colorArray, i * 3);\n  }\n  if (colorAttrib) {\n    // eslint-disable-next-line no-param-reassign\n    colorAttrib.needsUpdate = true;\n  }\n};\n\nexport const VoxelInstancedPoints = memo((props: VoxelInstancedPointsProps) => {\n  const {\n    data, pointSegments, voxelResolution, debugVoxels,\n  } = props;\n\n  const [voxels, setVoxels] = React.useState<Point[][]>([]);\n\n  // re-use for instance computations\n  const meshRefs = React.useRef<THREE.InstancedMesh[]>([]);\n  const colorAttribs = React.useRef<THREE.InstancedBufferAttribute[]>([]);\n  const colorArrays: Float32Array[] = [];\n  for (let i = 0; i < voxels.length; i++) {\n    colorArrays[i] = new Float32Array(voxels[i].length * 3);\n  }\n\n  // Sort points into voxel grid when data or grid resolution changes\n  React.useEffect(() => {\n    // eslint-disable-next-line no-mixed-operators\n    const gridStep = gridScale * 2 / voxelResolution; // double grid scale to account for negative ranges\n    const numVoxels = voxelResolution ** 3;\n    const newVoxels: Point[][] = [];\n    for (let i = 0; i < numVoxels; i++) {\n      newVoxels.push([]);\n    }\n\n    // const newVoxels: Point[][] = new Array(Math.pow(voxelResolution, 3)).fill(new Array);\n    data.forEach((point) => {\n      if (point.include) {\n        // Shift into positive ranges\n        const x = point.x + gridScale;\n        const y = point.y + gridScale;\n        const z = point.z + gridScale;\n\n        const voxelIndex = Math.floor(x / gridStep)\n          + Math.floor(y / gridStep) * voxelResolution\n          + Math.floor(z / gridStep) * voxelResolution * voxelResolution;\n        newVoxels[voxelIndex].push(point);\n      }\n    });\n    setVoxels(newVoxels);\n  }, [data, voxelResolution]);\n\n  // re-use for instance computations\n  const scratchObject3D = useMemo(() => new Object3D(), []);\n  const sharedMaterial = useMemo(() => new MeshLambertMaterial({ vertexColors: true }), []);\n\n  React.useEffect(() => {\n    for (let i = 0; i < voxels.length; ++i) {\n      const voxel = voxels[i];\n      const mesh = meshRefs.current[i];\n      const points = voxel.map((p) => new Vector3(p.x, p.y, p.z));\n\n      if (mesh) {\n        mesh.matrixAutoUpdate = false; // TODO try for clusters\n        mesh.updateMatrix();\n        // set the transform matrix for each instance\n        for (let j = 0; j < points.length; ++j) {\n          const { x } = points[j];\n          const { y } = points[j];\n          const { z } = points[j];\n\n          scratchObject3D.position.set(x, y, z);\n          scratchObject3D.updateMatrix();\n          mesh.setMatrixAt(j, scratchObject3D.matrix);\n        }\n\n        mesh.geometry.boundingSphere = new THREE.Sphere().setFromPoints(points);\n        mesh.geometry.boundingSphere.radius = Math.max(mesh.geometry.boundingSphere.radius, POINT_RADIUS);\n        mesh.instanceMatrix.needsUpdate = true;\n        mesh.frustumCulled = true;\n        updateColors(\n          voxel,\n          colorArrays[i],\n          colorAttribs.current[i],\n          debugVoxels ? i : undefined,\n        );\n      }\n    }\n  }, [voxels, scratchObject3D, colorArrays, debugVoxels]);\n\n  return (\n    <>\n      {voxels.map((voxel, index) => (voxel.length > 0\n        ? (\n          <instancedMesh\n            key={`${index} ${voxel.length}`}\n            ref={(mesh: THREE.InstancedMesh) => meshRefs.current[index] = mesh}\n            args={[\n                  // TODO sort out the bugged typing here.\n                  // Ref: https://spectrum.chat/react-three-fiber/general/instancedmesh-gone-on-rerender-in-typescript~35e4d145-517f-4b81-b0c7-ab89e02bd72f\n                  (null as unknown) as THREE.BufferGeometry,\n                  (null as unknown) as THREE.Material,\n                  voxel.length,\n            ]}\n            material={sharedMaterial}\n          >\n            <sphereBufferGeometry\n              attach=\"geometry\"\n              args={[POINT_RADIUS, pointSegments, pointSegments]}\n              key={pointSegments}\n            >\n              <instancedBufferAttribute\n                name={`color - voxel ${index}`}\n                ref={(colorAttrib: THREE.InstancedBufferAttribute) => colorAttribs.current[index] = colorAttrib}\n                attachObject={['attributes', 'color']}\n                args={[colorArrays[index], 3]}\n              />\n            </sphereBufferGeometry>\n          </instancedMesh>\n        )\n        : null))}\n      )\n    </>\n  );\n});\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ClusterHulls.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Text.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\index.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointDetailsSection.tsx",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":8,"column":27,"nodeType":"111","endLine":8,"endColumn":75},{"ruleId":"112","severity":1,"message":"113","line":89,"column":11,"nodeType":"114","messageId":"115","endLine":89,"endColumn":58},{"ruleId":"116","severity":1,"message":"113","line":89,"column":11,"nodeType":"114","messageId":"115","endLine":89,"endColumn":58},{"ruleId":"112","severity":1,"message":"113","line":114,"column":13,"nodeType":"114","messageId":"115","endLine":114,"endColumn":61},{"ruleId":"116","severity":1,"message":"113","line":114,"column":13,"nodeType":"114","messageId":"115","endLine":114,"endColumn":61},{"ruleId":"112","severity":1,"message":"113","line":118,"column":13,"nodeType":"114","messageId":"115","endLine":118,"endColumn":57},{"ruleId":"116","severity":1,"message":"113","line":118,"column":13,"nodeType":"114","messageId":"115","endLine":118,"endColumn":57},{"ruleId":"117","severity":1,"message":"118","line":49,"column":9,"nodeType":"119","endLine":49,"endColumn":41},{"ruleId":"120","severity":1,"message":"121","line":124,"column":18,"nodeType":"122","endLine":124,"endColumn":44},{"ruleId":"123","severity":1,"message":"124","line":125,"column":18,"nodeType":"125","messageId":"126","endLine":125,"endColumn":79},{"ruleId":"123","severity":1,"message":"124","line":142,"column":22,"nodeType":"125","messageId":"126","endLine":142,"endColumn":112},"jsx-a11y/label-has-for",[],"lines-around-directive",["127"],"no-spaced-func",["128"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"import/extensions","Unexpected use of file extension \"js\" for \"three/examples/jsm/postprocessing/BloomPass.js\"","Literal","@typescript-eslint/no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","babel/no-unused-expressions","react-hooks/exhaustive-deps","The 'colorArrays' array makes the dependencies of useEffect Hook (at line 117) change on every render. To fix this, wrap the initialization of 'colorArrays' in its own useMemo() Hook.","VariableDeclarator","react/no-array-index-key","Do not use Array index in keys","TemplateLiteral","no-return-assign","Arrow function should not return assignment.","ArrowFunctionExpression","arrowAssignment","padding-line-between-statements","func-call-spacing"]