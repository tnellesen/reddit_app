[{"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\App.tsx":"1","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\CollisionSphere.ts":"2","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\constants.ts":"3","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\util.ts":"4","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ViewportHooks.tsx":"5","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Effects.tsx":"6","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ThreePointVis.tsx":"7","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Stats.tsx":"8","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\DataList\\DataList.tsx":"9","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointInfo.tsx":"10","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\LoadingOverlay\\LoadingOverlay.tsx":"11","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Controls.tsx":"12","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\InstancedPoints.tsx":"13","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\VoxelInstancedPoints.tsx":"14","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ClusterHulls.tsx":"15","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Text.tsx":"16","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\index.tsx":"17"},{"size":20708,"mtime":1610915077616,"results":"18","hashOfConfig":"19"},{"size":1729,"mtime":1610877982584,"results":"20","hashOfConfig":"19"},{"size":2232,"mtime":1610877987120,"results":"21","hashOfConfig":"19"},{"size":251,"mtime":1610878015032,"results":"22","hashOfConfig":"19"},{"size":1084,"mtime":1610878019098,"results":"23","hashOfConfig":"19"},{"size":2355,"mtime":1610916190782,"results":"24","hashOfConfig":"19"},{"size":4730,"mtime":1610917158483,"results":"25","hashOfConfig":"19"},{"size":430,"mtime":1610877961401,"results":"26","hashOfConfig":"19"},{"size":4824,"mtime":1610877902822,"results":"27","hashOfConfig":"19"},{"size":1242,"mtime":1610877927466,"results":"28","hashOfConfig":"19"},{"size":438,"mtime":1610877923493,"results":"29","hashOfConfig":"19"},{"size":3960,"mtime":1610917138375,"results":"30","hashOfConfig":"19"},{"size":6661,"mtime":1610878076715,"results":"31","hashOfConfig":"19"},{"size":5257,"mtime":1610916763009,"results":"32","hashOfConfig":"19"},{"size":932,"mtime":1610877933255,"results":"33","hashOfConfig":"19"},{"size":2539,"mtime":1610877965317,"results":"34","hashOfConfig":"19"},{"size":255,"mtime":1610878004046,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1osl008",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\App.tsx",["73","74","75","76","77"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\CollisionSphere.ts",[],["78","79","80","81","82","83","84"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\constants.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\util.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ViewportHooks.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Effects.tsx",["85"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ThreePointVis.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Stats.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\DataList\\DataList.tsx",["86","87","88","89","90","91"],"// Based on: https://medium.com/@leofabrikant/react-autocomplete-with-react-virtualized-to-handle-massive-search-results-7865a8786972\nimport * as React from 'react';\nimport { areEqual, FixedSizeList as List } from 'react-window';\nimport './DataList.scss';\nimport { memo, useRef } from 'react';\n\nexport interface DataListProps {\n  values: string[];\n  id: string;\n  onSelect?: (\n    selected: string\n  ) => void;\n  onChange?: (\n    selected: string\n  ) => void;\n}\n\nexport const cleanTerm = (term: string) => term.toLowerCase().replace(/\\s+/g, '');\n\nconst itemHeight = 30;\n\nexport const DataList = memo((props: DataListProps) => {\n  const {\n    values, id, onChange, onSelect,\n  } = props;\n\n  const [activeIndex, setActiveIndex] = React.useState<number | null>(null);\n  const [lastHoverIndex, setLastHoverIndex] = React.useState(0);\n  const [showMenu, setShowMenu] = React.useState(false);\n  const [mouseSelect, setMouseSelect] = React.useState(false);\n  const [searchTerm, setSearchTerm] = React.useState('');\n\n  const listRef = useRef<List>(null);\n  const containerRef = useRef<HTMLElement | null>(null);\n\n  React.useEffect(() => {\n    if (containerRef.current) {\n      containerRef?.current?.setAttribute('tabIndex', '0');\n    }\n  }, [containerRef]);\n\n  // @ts-ignore\n  // eslint-disable-next-line react/prop-types\n  const Row = memo(({ data, index, style }) => {\n    // Data passed to List as \"itemData\" is available as props.data\n    const item = data[index];\n\n    return (\n      // eslint-disable-next-line max-len\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/mouse-events-have-key-events,jsx-a11y/no-static-element-interactions\n      <div\n        className=\"data-list-item\"\n        onMouseOver={() => {\n          if (lastHoverIndex !== index && mouseSelect) {\n            setActiveIndex(index);\n            setLastHoverIndex(index);\n          }\n        }}\n        onMouseMove={() => setMouseSelect(true)}\n        style={{\n          ...style,\n          backgroundColor: index === activeIndex ? '#0b195e' : '#111111',\n          verticalAlign: 'center',\n        }}\n        onClick={() => {\n          setShowMenu(false);\n          setActiveIndex(null);\n          onSelect && onSelect(values[index]);\n        }}\n      >\n        {item}\n      </div>\n    );\n  }, areEqual);\n\n  React.useEffect(() => {\n    if (activeIndex !== null) {\n      listRef.current?.scrollToItem(activeIndex);\n    }\n  });\n\n  return (\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    <div\n      className=\"data-list\"\n      onBlur={(e) => {\n        if (containerRef?.current?.contains(e.relatedTarget as Node)) {\n          setShowMenu(false);\n          setActiveIndex(null);\n        }\n      }}\n      onKeyDown={(e) => {\n        const listLength = values.length;\n        // e.preventDefault();\n        e.stopPropagation();\n        if (e.keyCode === 13) {\n          if (activeIndex) {\n            const value = values[activeIndex];\n            onSelect && value && onSelect(value);\n            setShowMenu(false);\n            setActiveIndex(null);\n          } else {\n            onSelect && onSelect(searchTerm);\n          }\n        } else {\n          if (!showMenu) {\n            setShowMenu(true);\n          }\n          if (e.keyCode === 38) {\n            if (activeIndex === null) {\n              setActiveIndex(listLength - 1);\n            } else {\n              setMouseSelect(false);\n              const newActiveIndex = activeIndex - 1;\n              setActiveIndex(newActiveIndex >= 0 ? newActiveIndex : listLength - 1);\n            }\n          } else if (e.keyCode === 40) {\n            if (activeIndex === null) {\n              setActiveIndex(0);\n            } else {\n              setMouseSelect(false);\n              const newActiveIndex = activeIndex + 1;\n              setActiveIndex(newActiveIndex < listLength ? newActiveIndex : 0);\n            }\n          } else {\n            setActiveIndex(null);\n          }\n        }\n      }}\n    >\n      {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n      <div className=\"data-list-input\" onClick={() => setShowMenu(true)}>\n        <input\n          type=\"text\"\n          id={id}\n          list=\"subreddits\"\n          onChange={(e) => {\n            setSearchTerm(e.target.value);\n            if (onChange) {\n              onChange(e.target.value);\n            }\n          }}\n        />\n      </div>\n      {showMenu\n        && (\n        <List\n          ref={listRef}\n          outerRef={containerRef}\n          width=\"100%\"\n          height={190}\n          key={id}\n          style={{ position: 'absolute' }}\n          itemCount={values.length}\n          itemData={values}\n          itemSize={itemHeight}\n        >\n          {Row}\n        </List>\n        )}\n    </div>\n  );\n});\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointInfo.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\LoadingOverlay\\LoadingOverlay.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Controls.tsx",["92","93"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\InstancedPoints.tsx",["94","95"],"import * as React from 'react';\nimport * as THREE from 'three';\nimport {\n  MouseEvent, useThree, useFrame, Camera,\n} from 'react-three-fiber';\nimport {\n  Frustum, Matrix4, Vector3, InstancedBufferAttribute,\n} from 'three';\nimport { MutableRefObject, useEffect, useState } from 'react';\nimport { SelectedIds, SelectedPoints, SelectHandler } from './ThreePointVis';\nimport { Point } from '../App';\nimport { SCALE_FACTOR, clusterColors, POINT_RADIUS } from '../constants';\n\ninterface InstancedPointsProps {\n  data: Point[];\n  selectedPoints: SelectedPoints;\n  onSelect: SelectHandler;\n  enableCulling?: boolean;\n  pointSegments: number;\n}\n\n// re-use for instance computations\nconst scratchColor = new THREE.Color();\nconst scratchObject3D = new THREE.Object3D();\nconst scratchSphere = new THREE.Sphere();\nconst scratchPos = new Vector3(0, 0, 0);\nconst frustum = new Frustum();\nconst projScreenMatrix = new Matrix4();\n\nconst SELECTED_COLOR = '#6f6';\n\nconst updateColors = (\n  data: Point[],\n  selectedIds: SelectedIds,\n  pointIndexToId: number[],\n  maxCount: number,\n  colorArray: Float32Array,\n  colorAttrib: MutableRefObject<InstancedBufferAttribute | undefined>,\n) => {\n  for (let i = 0; i < maxCount; ++i) {\n    const point = data[pointIndexToId[i]];\n    scratchColor.set(\n      selectedIds.includes(point.id) ? SELECTED_COLOR : clusterColors[point.cluster],\n    );\n    scratchColor.toArray(colorArray, i * 3);\n\n    if (colorAttrib.current) {\n      // eslint-disable-next-line no-param-reassign\n      colorAttrib.current.needsUpdate = true;\n    }\n  }\n};\n\nfunction updateInstancedMeshMatrices(\n  mesh: THREE.InstancedMesh,\n  data: Point[],\n  maxPoints: number,\n  enableCulling: boolean,\n  camera: Camera,\n  pointIndexToId: number[],\n  colorArray: Float32Array,\n  colorAttrib: MutableRefObject<InstancedBufferAttribute | undefined>,\n  selectedIds: SelectedIds,\n): number {\n  let visibleInstanceCount = 0;\n  if (mesh) {\n    for (let i = 0; i < maxPoints; ++i) {\n      const { x } = data[i];\n      const { y } = data[i];\n      const { z } = data[i];\n\n      projScreenMatrix.multiplyMatrices(\n        camera.projectionMatrix,\n        camera.matrixWorldInverse,\n      );\n      frustum.setFromProjectionMatrix(projScreenMatrix);\n\n      scratchPos.set(x, y, z);\n\n      scratchSphere.set(scratchPos, POINT_RADIUS);\n\n      if (\n        (!frustum.intersectsSphere(scratchSphere) && enableCulling)\n        || !data[i].include\n      ) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      scratchObject3D.position.set(x, y, z);\n      scratchObject3D.updateMatrix();\n      mesh.setMatrixAt(visibleInstanceCount, scratchObject3D.matrix);\n      // eslint-disable-next-line no-param-reassign\n      pointIndexToId[visibleInstanceCount] = data[i].id;\n      visibleInstanceCount++;\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    mesh.count = visibleInstanceCount;\n    // eslint-disable-next-line no-param-reassign\n    mesh.instanceMatrix.needsUpdate = true;\n\n    updateColors(\n      data,\n      selectedIds,\n      pointIndexToId,\n      visibleInstanceCount,\n      colorArray,\n      colorAttrib,\n    );\n  }\n  return visibleInstanceCount;\n}\n\nconst useMousePointInteraction = (\n  onSelect: SelectHandler,\n  pointIndexToId: number[],\n) => {\n  // track mousedown position to skip click handlers on drags\n  const mouseDownRef = React.useRef([0, 0]);\n  const handlePointerDown = (event: MouseEvent) => {\n    mouseDownRef.current[0] = event.clientX;\n    mouseDownRef.current[1] = event.clientY;\n  };\n\n  const handleClick = (event: MouseEvent) => {\n    const { instanceId, clientX, clientY } = event;\n    const downDistance = Math.sqrt(\n      mouseDownRef.current[0] - clientX ** 2\n        + mouseDownRef.current[1] - clientY ** 2,\n    );\n\n    // skip click if we dragged more than 5px distance\n    if (downDistance > 5) {\n      event.stopPropagation();\n      return;\n    }\n\n    const id = instanceId !== undefined ? pointIndexToId[instanceId] : -1;\n\n    onSelect(id, event.ctrlKey);\n  };\n\n  return { handlePointerDown, handleClick };\n};\n\nexport const InstancedPoints = (props: InstancedPointsProps) => {\n  const {\n    data, selectedPoints, onSelect, enableCulling, pointSegments,\n  } = props;\n  const pointIndexToId = data.map((point) => point.id);\n\n  const meshRef = React.useRef<THREE.InstancedMesh>();\n  const [mesh, setMesh] = useState();\n  useEffect(() => setMesh(meshRef.current), [data]);\n\n  const { camera } = useThree();\n\n  const numPoints = data.length;\n\n  const colorAttrib = React.useRef<THREE.InstancedBufferAttribute>();\n  const colorArray = React.useMemo(() => new Float32Array(numPoints * 3), [\n    numPoints,\n  ]);\n\n  useFrame(() => {\n    if (mesh) {\n      updateInstancedMeshMatrices(\n        mesh,\n        data,\n        numPoints,\n        enableCulling || false,\n        camera,\n        pointIndexToId,\n        colorArray,\n        colorAttrib,\n        selectedPoints.map((point) => point.id),\n      );\n    }\n  });\n\n  const { handleClick, handlePointerDown } = useMousePointInteraction(\n    onSelect,\n    pointIndexToId,\n  );\n\n  const renderInstancedMesh = selectedPoints.map(\n    (point) => (\n      <group\n        position={[\n          point.x,\n          point.y,\n          point.z,\n        ]}\n      >\n        <pointLight\n          distance={19 * SCALE_FACTOR}\n          position={[0, 0, 0]}\n          intensity={2.5}\n          decay={30}\n          color={SELECTED_COLOR}\n        />\n        <pointLight\n          distance={10 * SCALE_FACTOR}\n          position={[0, 0, 0]}\n          intensity={1.5}\n          decay={1}\n          color={SELECTED_COLOR}\n        />\n      </group>\n    ),\n  );\n\n  return (\n    <>\n      <instancedMesh\n        ref={meshRef}\n        args={[\n            // TODO sort out the bugged typing here.\n            // Ref: https://spectrum.chat/react-three-fiber/general/instancedmesh-gone-on-rerender-in-typescript~35e4d145-517f-4b81-b0c7-ab89e02bd72f\n            (null as unknown) as THREE.BufferGeometry,\n            (null as unknown) as THREE.Material,\n            numPoints,\n        ]}\n        onPointerUp={handleClick}\n        onPointerDown={handlePointerDown}\n      >\n        <sphereBufferGeometry\n          attach=\"geometry\"\n          args={[POINT_RADIUS, pointSegments, pointSegments]}\n          key={pointSegments}\n        >\n          <instancedBufferAttribute\n            ref={colorAttrib}\n            attachObject={['attributes', 'color']}\n            args={[colorArray, 3]}\n          />\n        </sphereBufferGeometry>\n        <meshStandardMaterial attach=\"material\" vertexColors />\n      </instancedMesh>\n      {selectedPoints.length > 0 && (\n        renderInstancedMesh\n      )}\n    </>\n  );\n};\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\VoxelInstancedPoints.tsx",["96","97","98"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ClusterHulls.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Text.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\index.tsx",[],{"ruleId":"99","severity":1,"message":"100","line":100,"column":9,"nodeType":"101","endLine":100,"endColumn":68},{"ruleId":"99","severity":1,"message":"102","line":100,"column":9,"nodeType":"101","endLine":100,"endColumn":68},{"ruleId":"99","severity":1,"message":"103","line":265,"column":6,"nodeType":"104","endLine":265,"endColumn":80,"suggestions":"105"},{"ruleId":"99","severity":1,"message":"106","line":267,"column":84,"nodeType":"104","endLine":267,"endColumn":109,"suggestions":"107"},{"ruleId":"99","severity":1,"message":"108","line":281,"column":7,"nodeType":"104","endLine":281,"endColumn":22,"suggestions":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":8,"column":27,"nodeType":"126","endLine":8,"endColumn":75},{"ruleId":"127","severity":1,"message":"128","line":68,"column":11,"nodeType":"129","messageId":"130","endLine":68,"endColumn":47},{"ruleId":"131","severity":1,"message":"128","line":68,"column":11,"nodeType":"129","messageId":"130","endLine":68,"endColumn":47},{"ruleId":"127","severity":1,"message":"128","line":99,"column":13,"nodeType":"129","messageId":"130","endLine":99,"endColumn":50},{"ruleId":"131","severity":1,"message":"128","line":99,"column":13,"nodeType":"129","messageId":"130","endLine":99,"endColumn":50},{"ruleId":"127","severity":1,"message":"128","line":103,"column":13,"nodeType":"129","messageId":"130","endLine":103,"endColumn":46},{"ruleId":"131","severity":1,"message":"128","line":103,"column":13,"nodeType":"129","messageId":"130","endLine":103,"endColumn":46},{"ruleId":"99","severity":1,"message":"132","line":41,"column":9,"nodeType":"101","endLine":41,"endColumn":51},{"ruleId":"99","severity":1,"message":"133","line":41,"column":9,"nodeType":"101","endLine":41,"endColumn":51},{"ruleId":"134","severity":1,"message":"135","line":214,"column":3,"nodeType":"136","messageId":"137","endLine":214,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":215,"column":3,"nodeType":"136","messageId":"137","endLine":215,"endColumn":14},{"ruleId":"138","severity":1,"message":"139","line":124,"column":18,"nodeType":"140","endLine":124,"endColumn":44},{"ruleId":"141","severity":1,"message":"142","line":125,"column":18,"nodeType":"143","messageId":"144","endLine":125,"endColumn":79},{"ruleId":"141","severity":1,"message":"142","line":142,"column":22,"nodeType":"143","messageId":"144","endLine":142,"endColumn":112},"react-hooks/exhaustive-deps","The 'selection' logical expression could make the dependencies of useMemo Hook (at line 129) change on every render. To fix this, wrap the initialization of 'selection' in its own useMemo() Hook.","VariableDeclarator","The 'selection' logical expression could make the dependencies of useCallback Hook (at line 215) change on every render. To fix this, wrap the initialization of 'selection' in its own useMemo() Hook.","React Hook useCallback has an unnecessary dependency: 'raycaster'. Either exclude it or remove the dependency array. Outer scope values like 'raycaster' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["145"],"React Hook useMemo has an unnecessary dependency: 'window.devicePixelRatio'. Either exclude it or remove the dependency array. Outer scope values like 'window.devicePixelRatio' aren't valid dependencies because mutating them doesn't re-render the component.",["146"],"React Hook useMemo has a missing dependency: 'resolutionScales'. Either include it or remove the dependency array.",["147"],"jsx-a11y/label-has-for",[],"lines-around-directive",["148"],"no-spaced-func",["149"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"import/extensions","Unexpected use of file extension \"js\" for \"three/examples/jsm/postprocessing/BloomPass.js\"","Literal","@typescript-eslint/no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","babel/no-unused-expressions","The 'keyPressed' object makes the dependencies of useCallback Hook (at line 50) change on every render. To fix this, wrap the initialization of 'keyPressed' in its own useMemo() Hook.","The 'keyPressed' object makes the dependencies of useCallback Hook (at line 54) change on every render. To fix this, wrap the initialization of 'keyPressed' in its own useMemo() Hook.","no-console","Unexpected console statement.","MemberExpression","unexpected","react/no-array-index-key","Do not use Array index in keys","TemplateLiteral","no-return-assign","Arrow function should not return assignment.","ArrowFunctionExpression","arrowAssignment",{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},"padding-line-between-statements","func-call-spacing","Update the dependencies array to be: [camera, collisionGeometry, multiSelect, selectOrDeselectPoint]",{"range":"156","text":"157"},"Update the dependencies array to be: []",{"range":"158","text":"159"},"Update the dependencies array to be: [resolutionScales, width, height]",{"range":"160","text":"161"},[9557,9631],"[camera, collisionGeometry, multiSelect, selectOrDeselectPoint]",[9718,9743],"[]",[10135,10150],"[resolutionScales, width, height]"]