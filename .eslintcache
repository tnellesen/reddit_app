[{"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\App.tsx":"1","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\CollisionSphere.ts":"2","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\constants.ts":"3","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\util.ts":"4","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ViewportHooks.tsx":"5","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Effects.tsx":"6","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ThreePointVis.tsx":"7","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Stats.tsx":"8","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\DataList\\DataList.tsx":"9","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointInfo.tsx":"10","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\LoadingOverlay\\LoadingOverlay.tsx":"11","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Controls.tsx":"12","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\InstancedPoints.tsx":"13","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\VoxelInstancedPoints.tsx":"14","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ClusterHulls.tsx":"15","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Text.tsx":"16","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\index.tsx":"17"},{"size":20431,"mtime":1610877670814,"results":"18","hashOfConfig":"19"},{"size":1795,"mtime":1610877035004,"results":"20","hashOfConfig":"19"},{"size":2367,"mtime":1610877035083,"results":"21","hashOfConfig":"19"},{"size":254,"mtime":1610877035096,"results":"22","hashOfConfig":"19"},{"size":1119,"mtime":1610877035076,"results":"23","hashOfConfig":"19"},{"size":2383,"mtime":1610877035042,"results":"24","hashOfConfig":"19"},{"size":4810,"mtime":1610877035064,"results":"25","hashOfConfig":"19"},{"size":446,"mtime":1610877035052,"results":"26","hashOfConfig":"19"},{"size":4987,"mtime":1610877035009,"results":"27","hashOfConfig":"19"},{"size":1301,"mtime":1610877035020,"results":"28","hashOfConfig":"19"},{"size":458,"mtime":1610877035014,"results":"29","hashOfConfig":"19"},{"size":4211,"mtime":1610877035031,"results":"30","hashOfConfig":"19"},{"size":7019,"mtime":1610877035047,"results":"31","hashOfConfig":"19"},{"size":5838,"mtime":1610877035070,"results":"32","hashOfConfig":"19"},{"size":968,"mtime":1610877035025,"results":"33","hashOfConfig":"19"},{"size":2631,"mtime":1610877035059,"results":"34","hashOfConfig":"19"},{"size":263,"mtime":1610877035089,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1osl008",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":8,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":null},"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\App.tsx",["75","76","77","78"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\CollisionSphere.ts",[],["79","80","81","82","83","84","85"],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\constants.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\util.ts",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ViewportHooks.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Effects.tsx",["86"],"import React, { useRef, useEffect, useMemo } from 'react';\nimport * as THREE from 'three';\nimport { extend, useThree, useFrame } from 'react-three-fiber';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { BloomPass } from 'three/examples/jsm/postprocessing/BloomPass.js';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\n\nextend({\n  EffectComposer, ShaderPass, RenderPass, UnrealBloomPass, BloomPass,\n});\n\ninterface EffectsProps {\n  useAA?: boolean;\n  useStandardBloom?: boolean;\n  useUnrealBloom?: boolean;\n}\n\nexport function Effects(props: EffectsProps) {\n  const composer = useRef<EffectComposer>();\n  const {\n    scene, gl, size, camera,\n  } = useThree();\n  const aspectScalar = 8;\n  const aspect = useMemo(() => new THREE.Vector2(size.width / aspectScalar, size.height / aspectScalar), [\n    size,\n  ]);\n  const { useAA, useStandardBloom, useUnrealBloom } = props;\n\n  useEffect(() => composer.current!.setSize(size.width, size.height), [\n    size,\n  ]);\n  useFrame(() => (composer.current ? composer.current.render() : null), 1);\n\n  const unrealBloom = {\n    resolution: aspect,\n    strength: 0.3,\n    radius: 0.02,\n    threshold: 0.19,\n  };\n\n  const bloom = {\n    strength: 1,\n    kernelSize: 25,\n    sigma: 4,\n    targetResolution: 256,\n  };\n\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      { useUnrealBloom && (\n      <unrealBloomPass\n        attachArray=\"passes\"\n        args={[unrealBloom.resolution, unrealBloom.strength, unrealBloom.radius, unrealBloom.threshold]}\n      />\n      ) }\n      { useStandardBloom && (\n      <bloomPass\n        attachArray=\"passes\"\n        args={[bloom.strength, bloom.kernelSize, bloom.sigma, bloom.targetResolution]}\n      />\n      ) }\n      { useAA && (\n      <shaderPass\n        attachArray=\"passes\"\n        args={[FXAAShader]}\n        material-uniforms-resolution-value={[1 / size.width, 1 / size.height]}\n        renderToScreen\n      />\n      ) }\n    </effectComposer>\n  );\n}\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ThreePointVis.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Stats.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\DataList\\DataList.tsx",["87","88","89","90","91","92"],"// Based on: https://medium.com/@leofabrikant/react-autocomplete-with-react-virtualized-to-handle-massive-search-results-7865a8786972\nimport * as React from 'react';\nimport { areEqual, FixedSizeList as List } from 'react-window';\nimport './DataList.scss';\nimport { memo, useRef } from 'react';\n\nexport interface DataListProps {\n  values: string[];\n  id: string;\n  onSelect?: (\n    selected: string\n  ) => void;\n  onChange?: (\n    selected: string\n  ) => void;\n}\n\nexport const cleanTerm = (term: string) => term.toLowerCase().replace(/\\s+/g, '');\n\nconst itemHeight = 30;\n\nexport const DataList = memo((props: DataListProps) => {\n  const {\n    values, id, onChange, onSelect,\n  } = props;\n\n  const [activeIndex, setActiveIndex] = React.useState<number | null>(null);\n  const [lastHoverIndex, setLastHoverIndex] = React.useState(0);\n  const [showMenu, setShowMenu] = React.useState(false);\n  const [mouseSelect, setMouseSelect] = React.useState(false);\n  const [searchTerm, setSearchTerm] = React.useState('');\n\n  const listRef = useRef<List>(null);\n  const containerRef = useRef<HTMLElement | null>(null);\n\n  React.useEffect(() => {\n    if (containerRef.current) {\n      containerRef?.current?.setAttribute('tabIndex', '0');\n    }\n  }, [containerRef]);\n\n  // @ts-ignore\n  // eslint-disable-next-line react/prop-types\n  const Row = memo(({ data, index, style }) => {\n    // Data passed to List as \"itemData\" is available as props.data\n    const item = data[index];\n\n    return (\n      // eslint-disable-next-line max-len\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/mouse-events-have-key-events,jsx-a11y/no-static-element-interactions\n      <div\n        className=\"data-list-item\"\n        onMouseOver={() => {\n          if (lastHoverIndex !== index && mouseSelect) {\n            setActiveIndex(index);\n            setLastHoverIndex(index);\n          }\n        }}\n        onMouseMove={() => setMouseSelect(true)}\n        style={{\n          ...style,\n          backgroundColor: index === activeIndex ? '#0b195e' : '#111111',\n          verticalAlign: 'center',\n        }}\n        onClick={() => {\n          setShowMenu(false);\n          setActiveIndex(null);\n          onSelect && onSelect(values[index]);\n        }}\n      >\n        {item}\n      </div>\n    );\n  }, areEqual);\n\n  React.useEffect(() => {\n    if (activeIndex !== null) {\n      listRef.current?.scrollToItem(activeIndex);\n    }\n  });\n\n  return (\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    <div\n      className=\"data-list\"\n      onBlur={(e) => {\n        if (containerRef?.current?.contains(e.relatedTarget as Node)) {\n          setShowMenu(false);\n          setActiveIndex(null);\n        }\n      }}\n      onKeyDown={(e) => {\n        const listLength = values.length;\n        // e.preventDefault();\n        e.stopPropagation();\n        if (e.keyCode === 13) {\n          if (activeIndex) {\n            const value = values[activeIndex];\n            onSelect && value && onSelect(value);\n            setShowMenu(false);\n            setActiveIndex(null);\n          } else {\n            onSelect && onSelect(searchTerm);\n          }\n        } else {\n          if (!showMenu) {\n            setShowMenu(true);\n          }\n          if (e.keyCode === 38) {\n            if (activeIndex === null) {\n              setActiveIndex(listLength - 1);\n            } else {\n              setMouseSelect(false);\n              const newActiveIndex = activeIndex - 1;\n              setActiveIndex(newActiveIndex >= 0 ? newActiveIndex : listLength - 1);\n            }\n          } else if (e.keyCode === 40) {\n            if (activeIndex === null) {\n              setActiveIndex(0);\n            } else {\n              setMouseSelect(false);\n              const newActiveIndex = activeIndex + 1;\n              setActiveIndex(newActiveIndex < listLength ? newActiveIndex : 0);\n            }\n          } else {\n            setActiveIndex(null);\n          }\n        }\n      }}\n    >\n      {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n      <div className=\"data-list-input\" onClick={() => setShowMenu(true)}>\n        <input\n          type=\"text\"\n          id={id}\n          list=\"subreddits\"\n          onChange={(e) => {\n            setSearchTerm(e.target.value);\n            if (onChange) {\n              onChange(e.target.value);\n            }\n          }}\n        />\n      </div>\n      {showMenu\n        && (\n        <List\n          ref={listRef}\n          outerRef={containerRef}\n          width=\"100%\"\n          height={190}\n          key={id}\n          style={{ position: 'absolute' }}\n          itemCount={values.length}\n          itemData={values}\n          itemSize={itemHeight}\n        >\n          {Row}\n        </List>\n        )}\n    </div>\n  );\n});\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\PointInfo\\PointInfo.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\LoadingOverlay\\LoadingOverlay.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Controls.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\InstancedPoints.tsx",["93","94"],"import * as React from 'react';\nimport * as THREE from 'three';\nimport {\n  MouseEvent, useThree, useFrame, Camera,\n} from 'react-three-fiber';\nimport {\n  Frustum, Matrix4, Vector3, InstancedBufferAttribute,\n} from 'three';\nimport { MutableRefObject, useEffect, useState } from 'react';\nimport { SelectedIds, SelectedPoints, SelectHandler } from './ThreePointVis';\nimport { Point } from '../App';\nimport { SCALE_FACTOR, clusterColors, POINT_RADIUS } from '../constants';\n\ninterface InstancedPointsProps {\n  data: Point[];\n  selectedPoints: SelectedPoints;\n  onSelect: SelectHandler;\n  enableCulling?: boolean;\n  pointSegments: number;\n}\n\n// re-use for instance computations\nconst scratchColor = new THREE.Color();\nconst scratchObject3D = new THREE.Object3D();\nconst scratchSphere = new THREE.Sphere();\nconst scratchPos = new Vector3(0, 0, 0);\nconst frustum = new Frustum();\nconst projScreenMatrix = new Matrix4();\n\nconst SELECTED_COLOR = '#6f6';\n\nconst updateColors = (\n  data: Point[],\n  selectedIds: SelectedIds,\n  pointIndexToId: number[],\n  maxCount: number,\n  colorArray: Float32Array,\n  colorAttrib: MutableRefObject<InstancedBufferAttribute | undefined>,\n) => {\n  for (let i = 0; i < maxCount; ++i) {\n    const point = data[pointIndexToId[i]];\n    scratchColor.set(\n      selectedIds.includes(point.id) ? SELECTED_COLOR : clusterColors[point.cluster],\n    );\n    scratchColor.toArray(colorArray, i * 3);\n\n    if (colorAttrib.current) {\n      // eslint-disable-next-line no-param-reassign\n      colorAttrib.current.needsUpdate = true;\n    }\n  }\n};\n\nfunction updateInstancedMeshMatrices(\n  mesh: THREE.InstancedMesh,\n  data: Point[],\n  maxPoints: number,\n  enableCulling: boolean,\n  camera: Camera,\n  pointIndexToId: number[],\n  colorArray: Float32Array,\n  colorAttrib: MutableRefObject<InstancedBufferAttribute | undefined>,\n  selectedIds: SelectedIds,\n): number {\n  let visibleInstanceCount = 0;\n  if (mesh) {\n    for (let i = 0; i < maxPoints; ++i) {\n      const { x } = data[i];\n      const { y } = data[i];\n      const { z } = data[i];\n\n      projScreenMatrix.multiplyMatrices(\n        camera.projectionMatrix,\n        camera.matrixWorldInverse,\n      );\n      frustum.setFromProjectionMatrix(projScreenMatrix);\n\n      scratchPos.set(x, y, z);\n\n      scratchSphere.set(scratchPos, POINT_RADIUS);\n\n      if (\n        (!frustum.intersectsSphere(scratchSphere) && enableCulling)\n        || !data[i].include\n      ) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      scratchObject3D.position.set(x, y, z);\n      scratchObject3D.updateMatrix();\n      mesh.setMatrixAt(visibleInstanceCount, scratchObject3D.matrix);\n      // eslint-disable-next-line no-param-reassign\n      pointIndexToId[visibleInstanceCount] = data[i].id;\n      visibleInstanceCount++;\n    }\n\n    // eslint-disable-next-line no-param-reassign\n    mesh.count = visibleInstanceCount;\n    // eslint-disable-next-line no-param-reassign\n    mesh.instanceMatrix.needsUpdate = true;\n\n    updateColors(\n      data,\n      selectedIds,\n      pointIndexToId,\n      visibleInstanceCount,\n      colorArray,\n      colorAttrib,\n    );\n  }\n  return visibleInstanceCount;\n}\n\nconst useMousePointInteraction = (\n  onSelect: SelectHandler,\n  pointIndexToId: number[],\n) => {\n  // track mousedown position to skip click handlers on drags\n  const mouseDownRef = React.useRef([0, 0]);\n  const handlePointerDown = (event: MouseEvent) => {\n    mouseDownRef.current[0] = event.clientX;\n    mouseDownRef.current[1] = event.clientY;\n  };\n\n  const handleClick = (event: MouseEvent) => {\n    const { instanceId, clientX, clientY } = event;\n    const downDistance = Math.sqrt(\n      mouseDownRef.current[0] - clientX ** 2\n        + mouseDownRef.current[1] - clientY ** 2,\n    );\n\n    // skip click if we dragged more than 5px distance\n    if (downDistance > 5) {\n      event.stopPropagation();\n      return;\n    }\n\n    const id = instanceId !== undefined ? pointIndexToId[instanceId] : -1;\n\n    onSelect(id, event.ctrlKey);\n  };\n\n  return { handlePointerDown, handleClick };\n};\n\nexport const InstancedPoints = (props: InstancedPointsProps) => {\n  const {\n    data, selectedPoints, onSelect, enableCulling, pointSegments,\n  } = props;\n  const pointIndexToId = data.map((point) => point.id);\n\n  const meshRef = React.useRef<THREE.InstancedMesh>();\n  const [mesh, setMesh] = useState();\n  useEffect(() => setMesh(meshRef.current), [data]);\n\n  const { camera } = useThree();\n\n  const numPoints = data.length;\n\n  const colorAttrib = React.useRef<THREE.InstancedBufferAttribute>();\n  const colorArray = React.useMemo(() => new Float32Array(numPoints * 3), [\n    numPoints,\n  ]);\n\n  useFrame(() => {\n    if (mesh) {\n      updateInstancedMeshMatrices(\n        mesh,\n        data,\n        numPoints,\n        enableCulling || false,\n        camera,\n        pointIndexToId,\n        colorArray,\n        colorAttrib,\n        selectedPoints.map((point) => point.id),\n      );\n    }\n  });\n\n  const { handleClick, handlePointerDown } = useMousePointInteraction(\n    onSelect,\n    pointIndexToId,\n  );\n\n  const renderInstancedMesh = selectedPoints.map(\n    (point) => (\n      <group\n        position={[\n          point.x,\n          point.y,\n          point.z,\n        ]}\n      >\n        <pointLight\n          distance={19 * SCALE_FACTOR}\n          position={[0, 0, 0]}\n          intensity={2.5}\n          decay={30}\n          color={SELECTED_COLOR}\n        />\n        <pointLight\n          distance={10 * SCALE_FACTOR}\n          position={[0, 0, 0]}\n          intensity={1.5}\n          decay={1}\n          color={SELECTED_COLOR}\n        />\n      </group>\n    ),\n  );\n\n  console.log('renderInstancedMesh:', renderInstancedMesh);\n  console.log('selectedPoints:', selectedPoints);\n  return (\n    <>\n      <instancedMesh\n        ref={meshRef}\n        args={[\n            // TODO sort out the bugged typing here.\n            // Ref: https://spectrum.chat/react-three-fiber/general/instancedmesh-gone-on-rerender-in-typescript~35e4d145-517f-4b81-b0c7-ab89e02bd72f\n            (null as unknown) as THREE.BufferGeometry,\n            (null as unknown) as THREE.Material,\n            numPoints,\n        ]}\n        onPointerUp={handleClick}\n        onPointerDown={handlePointerDown}\n      >\n        <sphereBufferGeometry\n          attach=\"geometry\"\n          args={[POINT_RADIUS, pointSegments, pointSegments]}\n          key={pointSegments}\n        >\n          <instancedBufferAttribute\n            ref={colorAttrib}\n            attachObject={['attributes', 'color']}\n            args={[colorArray, 3]}\n          />\n        </sphereBufferGeometry>\n        <meshStandardMaterial attach=\"material\" vertexColors />\n      </instancedMesh>\n      {selectedPoints.length > 0 && (\n        renderInstancedMesh\n      )}\n    </>\n  );\n};\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\VoxelInstancedPoints.tsx",["95","96","97","98","99","100","101","102"],"import * as React from 'react';\nimport * as THREE from 'three';\nimport {\n  InstancedBufferAttribute, MeshLambertMaterial, Object3D, Vector3,\n} from 'three';\nimport { memo, useMemo } from 'react';\nimport { Point } from '../App';\nimport { clusterColors, POINT_RADIUS } from '../constants';\n\ninterface VoxelInstancedPointsProps {\n  data: Point[];\n  pointSegments: number;\n  voxelResolution: number;\n  debugVoxels?: boolean;\n}\n\nconst gridScale = 1001;\nconst scratchColor = new THREE.Color(0xff0000);\n\nconst updateColors = (\n  points: Point[],\n  colorArray: Float32Array,\n  colorAttrib: InstancedBufferAttribute,\n  voxelIndex?: number,\n) => {\n  for (let i = 0; i < points.length; ++i) {\n    const point = points[i];\n    scratchColor.set(\n      clusterColors[voxelIndex === undefined ? point.cluster : voxelIndex % clusterColors.length],\n    );\n    scratchColor.toArray(colorArray, i * 3);\n  }\n  if (colorAttrib) {\n    // eslint-disable-next-line no-param-reassign\n    colorAttrib.needsUpdate = true;\n  }\n};\n\nexport const VoxelInstancedPoints = memo((props: VoxelInstancedPointsProps) => {\n  const {\n    data, pointSegments, voxelResolution, debugVoxels,\n  } = props;\n\n  const [voxels, setVoxels] = React.useState<Point[][]>([]);\n\n  // re-use for instance computations\n  const meshRefs = React.useRef<THREE.InstancedMesh[]>([]);\n  const colorAttribs = React.useRef<THREE.InstancedBufferAttribute[]>([]);\n  const colorArrays: Float32Array[] = [];\n  for (let i = 0; i < voxels.length; i++) {\n    colorArrays[i] = new Float32Array(voxels[i].length * 3);\n  }\n\n  // Sort points into voxel grid when data or grid resolution changes\n  React.useEffect(() => {\n    // eslint-disable-next-line no-mixed-operators\n    const gridStep = gridScale * 2 / voxelResolution; // double grid scale to account for negative ranges\n    const numVoxels = voxelResolution ** 3;\n    const newVoxels: Point[][] = [];\n    for (let i = 0; i < numVoxels; i++) {\n      newVoxels.push([]);\n    }\n\n    // const newVoxels: Point[][] = new Array(Math.pow(voxelResolution, 3)).fill(new Array);\n    data.forEach((point) => {\n      if (point.include) {\n        // Shift into positive ranges\n        const x = point.x + gridScale;\n        const y = point.y + gridScale;\n        const z = point.z + gridScale;\n\n        const voxelIndex = Math.floor(x / gridStep)\n          + Math.floor(y / gridStep) * voxelResolution\n          + Math.floor(z / gridStep) * voxelResolution * voxelResolution;\n        if (newVoxels[voxelIndex] === undefined) {\n          console.log(voxelIndex);\n        }\n        newVoxels[voxelIndex].push(point);\n      }\n    });\n    setVoxels(newVoxels);\n  }, [data, voxelResolution]);\n\n  // re-use for instance computations\n  const scratchObject3D = useMemo(() => new Object3D(), []);\n  const sharedMaterial = useMemo(() => new MeshLambertMaterial({ vertexColors: true }), []);\n\n  React.useEffect(() => {\n    let numEmptyVoxels = 0;\n    for (let i = 0; i < voxels.length; ++i) {\n      const voxel = voxels[i];\n      if (voxel.length > 0) {\n        const mesh = meshRefs.current[i];\n        const points = voxel.map((p) => new Vector3(p.x, p.y, p.z));\n\n        if (mesh) {\n          mesh.matrixAutoUpdate = false; // TODO try for clusters\n          mesh.updateMatrix();\n          // set the transform matrix for each instance\n          for (let j = 0; j < points.length; ++j) {\n            const { x } = points[j];\n            const { y } = points[j];\n            const { z } = points[j];\n\n            scratchObject3D.position.set(x, y, z);\n            scratchObject3D.updateMatrix();\n            mesh.setMatrixAt(j, scratchObject3D.matrix);\n          }\n\n          mesh.geometry.boundingSphere = new THREE.Sphere().setFromPoints(points);\n          mesh.geometry.boundingSphere.radius = Math.max(mesh.geometry.boundingSphere.radius, POINT_RADIUS);\n          mesh.instanceMatrix.needsUpdate = true;\n          mesh.frustumCulled = true;\n          updateColors(\n            voxel,\n            colorArrays[i],\n            colorAttribs.current[i],\n            debugVoxels ? i : undefined,\n          );\n        }\n      } else {\n        numEmptyVoxels++;\n      }\n    }\n    console.log('Total Voxels: ', voxels.length);\n    console.log('Empty Voxels: ', numEmptyVoxels);\n    console.log('Percent Empty Voxels ', (numEmptyVoxels / voxels.length) * 100);\n  }, [voxels, scratchObject3D, colorArrays, debugVoxels]);\n\n  return (\n    <>\n      {voxels.map((voxel, index) => (voxel.length > 0\n        ? (\n          <instancedMesh\n            key={`${index} ${voxel.length}`}\n            ref={(mesh: THREE.InstancedMesh) => meshRefs.current[index] = mesh}\n            args={[\n                  // TODO sort out the bugged typing here.\n                  // Ref: https://spectrum.chat/react-three-fiber/general/instancedmesh-gone-on-rerender-in-typescript~35e4d145-517f-4b81-b0c7-ab89e02bd72f\n                  (null as unknown) as THREE.BufferGeometry,\n                  (null as unknown) as THREE.Material,\n                  voxel.length,\n            ]}\n            material={sharedMaterial}\n          >\n            <sphereBufferGeometry\n              attach=\"geometry\"\n              args={[POINT_RADIUS, pointSegments, pointSegments]}\n              key={pointSegments}\n            >\n              <instancedBufferAttribute\n                name={`color - voxel ${index}`}\n                ref={(colorAttrib: THREE.InstancedBufferAttribute) => colorAttribs.current[index] = colorAttrib}\n                attachObject={['attributes', 'color']}\n                args={[colorArrays[index], 3]}\n              />\n            </sphereBufferGeometry>\n          </instancedMesh>\n        )\n        : null))}\n      )\n    </>\n  );\n});\n","C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\ClusterHulls.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\ThreePointVis\\Text.tsx",[],"C:\\Users\\John\\Documents\\GitHub\\reddit_app\\src\\index.tsx",["103","104","105","106","107","108","109","110"],{"ruleId":"111","severity":1,"message":"112","line":17,"column":31,"nodeType":"113","endLine":17,"endColumn":66},{"ruleId":"114","severity":1,"message":"115","line":97,"column":9,"nodeType":"116","endLine":97,"endColumn":68},{"ruleId":"114","severity":1,"message":"117","line":265,"column":84,"nodeType":"118","endLine":265,"endColumn":109,"suggestions":"119"},{"ruleId":"114","severity":1,"message":"120","line":279,"column":7,"nodeType":"118","endLine":279,"endColumn":22,"suggestions":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"111","severity":1,"message":"136","line":8,"column":27,"nodeType":"113","endLine":8,"endColumn":75},{"ruleId":"137","severity":1,"message":"138","line":68,"column":11,"nodeType":"139","messageId":"140","endLine":68,"endColumn":47},{"ruleId":"141","severity":1,"message":"138","line":68,"column":11,"nodeType":"139","messageId":"140","endLine":68,"endColumn":47},{"ruleId":"137","severity":1,"message":"138","line":99,"column":13,"nodeType":"139","messageId":"140","endLine":99,"endColumn":50},{"ruleId":"141","severity":1,"message":"138","line":99,"column":13,"nodeType":"139","messageId":"140","endLine":99,"endColumn":50},{"ruleId":"137","severity":1,"message":"138","line":103,"column":13,"nodeType":"139","messageId":"140","endLine":103,"endColumn":46},{"ruleId":"141","severity":1,"message":"138","line":103,"column":13,"nodeType":"139","messageId":"140","endLine":103,"endColumn":46},{"ruleId":"142","severity":1,"message":"143","line":214,"column":3,"nodeType":"144","messageId":"145","endLine":214,"endColumn":14},{"ruleId":"142","severity":1,"message":"143","line":215,"column":3,"nodeType":"144","messageId":"145","endLine":215,"endColumn":14},{"ruleId":"114","severity":1,"message":"146","line":49,"column":9,"nodeType":"116","endLine":49,"endColumn":41},{"ruleId":"142","severity":1,"message":"143","line":76,"column":11,"nodeType":"144","messageId":"145","endLine":76,"endColumn":22},{"ruleId":"142","severity":1,"message":"143","line":125,"column":5,"nodeType":"144","messageId":"145","endLine":125,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":126,"column":5,"nodeType":"144","messageId":"145","endLine":126,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":127,"column":5,"nodeType":"144","messageId":"145","endLine":127,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":135,"column":18,"nodeType":"149","endLine":135,"endColumn":44},{"ruleId":"150","severity":1,"message":"151","line":136,"column":18,"nodeType":"152","messageId":"153","endLine":136,"endColumn":79},{"ruleId":"150","severity":1,"message":"151","line":153,"column":22,"nodeType":"152","messageId":"153","endLine":153,"endColumn":112},{"ruleId":"154","severity":2,"message":"155","line":1,"column":32,"nodeType":"156","messageId":"157","endLine":2,"endColumn":1,"fix":"158"},{"ruleId":"154","severity":2,"message":"155","line":2,"column":36,"nodeType":"156","messageId":"157","endLine":3,"endColumn":1,"fix":"159"},{"ruleId":"154","severity":2,"message":"155","line":3,"column":1,"nodeType":"156","messageId":"157","endLine":4,"endColumn":1,"fix":"160"},{"ruleId":"154","severity":2,"message":"155","line":4,"column":60,"nodeType":"156","messageId":"157","endLine":5,"endColumn":1,"fix":"161"},{"ruleId":"154","severity":2,"message":"155","line":5,"column":25,"nodeType":"156","messageId":"157","endLine":6,"endColumn":1,"fix":"162"},{"ruleId":"154","severity":2,"message":"155","line":6,"column":1,"nodeType":"156","messageId":"157","endLine":7,"endColumn":1,"fix":"163"},{"ruleId":"154","severity":2,"message":"155","line":7,"column":53,"nodeType":"156","messageId":"157","endLine":8,"endColumn":1,"fix":"164"},{"ruleId":"154","severity":2,"message":"155","line":8,"column":47,"nodeType":"156","messageId":"157","endLine":9,"endColumn":1,"fix":"165"},"import/extensions","Unexpected use of file extension \"tsx\" for \"./ThreePointVis/ThreePointVis.tsx\"","Literal","react-hooks/exhaustive-deps","The 'selection' logical expression could make the dependencies of useMemo Hook (at line 126) change on every render. To fix this, wrap the initialization of 'selection' in its own useMemo() Hook.","VariableDeclarator","React Hook useMemo has an unnecessary dependency: 'window.devicePixelRatio'. Either exclude it or remove the dependency array. Outer scope values like 'window.devicePixelRatio' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["166"],"React Hook useMemo has a missing dependency: 'resolutionScales'. Either include it or remove the dependency array.",["167"],"jsx-a11y/label-has-for",[],"lines-around-directive",["168"],"no-spaced-func",["169"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"Unexpected use of file extension \"js\" for \"three/examples/jsm/postprocessing/BloomPass.js\"","@typescript-eslint/no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","babel/no-unused-expressions","no-console","Unexpected console statement.","MemberExpression","unexpected","The 'colorArrays' array makes the dependencies of useEffect Hook (at line 128) change on every render. To fix this, wrap the initialization of 'colorArrays' in its own useMemo() Hook.","react/no-array-index-key","Do not use Array index in keys","TemplateLiteral","no-return-assign","Arrow function should not return assignment.","ArrowFunctionExpression","arrowAssignment","linebreak-style","Expected linebreaks to be 'LF' but found 'CRLF'.","Program","expectedLF",{"range":"170","text":"171"},{"range":"172","text":"171"},{"range":"173","text":"171"},{"range":"174","text":"171"},{"range":"175","text":"171"},{"range":"176","text":"171"},{"range":"177","text":"171"},{"range":"178","text":"171"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},"padding-line-between-statements","func-call-spacing",[31,33],"\n",[68,70],[70,72],[131,133],[157,159],[159,161],[213,215],[261,263],"Update the dependencies array to be: []",{"range":"183","text":"184"},"Update the dependencies array to be: [resolutionScales, width, height]",{"range":"185","text":"186"},[9441,9466],"[]",[9858,9873],"[resolutionScales, width, height]"]